// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username, password, fullname, email) VALUES (
        $1, $2, $3, $4
    )
    RETURNING id, username, password, fullname, email, total_swipes, last_swipe_date, swipe_count, is_premium
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Fullname string `json:"fullname"`
	Email    string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Username,
		arg.Password,
		arg.Fullname,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Fullname,
		&i.Email,
		&i.TotalSwipes,
		&i.LastSwipeDate,
		&i.SwipeCount,
		&i.IsPremium,
	)
	return i, err
}

const listSwipableProfiles = `-- name: ListSwipableProfiles :many
SELECT users.id, username, password, fullname, email, total_swipes, last_swipe_date, swipe_count, is_premium, swipes.id, user_id, target_id, direction, swipe_date, "unique"
FROM users
LEFT JOIN swipes ON users.id = swipes.target_id
WHERE swipes.user_id != $1 OR (swipes.user_id = $1 AND swipes.swipe_date < CURRENT_TIMESTAMP - INTERVAL '1 day')
LIMIT $2
`

type ListSwipableProfilesParams struct {
	UserID sql.NullInt64 `json:"user_id"`
	Limit  int32         `json:"limit"`
}

type ListSwipableProfilesRow struct {
	ID            int64         `json:"id"`
	Username      string        `json:"username"`
	Password      string        `json:"password"`
	Fullname      string        `json:"fullname"`
	Email         string        `json:"email"`
	TotalSwipes   sql.NullInt32 `json:"total_swipes"`
	LastSwipeDate sql.NullTime  `json:"last_swipe_date"`
	SwipeCount    sql.NullInt32 `json:"swipe_count"`
	IsPremium     sql.NullBool  `json:"is_premium"`
	ID_2          sql.NullInt64 `json:"id_2"`
	UserID        sql.NullInt64 `json:"user_id"`
	TargetID      sql.NullInt64 `json:"target_id"`
	Direction     interface{}   `json:"direction"`
	SwipeDate     sql.NullTime  `json:"swipe_date"`
	Unique        interface{}   `json:"unique"`
}

func (q *Queries) ListSwipableProfiles(ctx context.Context, arg ListSwipableProfilesParams) ([]ListSwipableProfilesRow, error) {
	rows, err := q.query(ctx, q.listSwipableProfilesStmt, listSwipableProfiles, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSwipableProfilesRow{}
	for rows.Next() {
		var i ListSwipableProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Fullname,
			&i.Email,
			&i.TotalSwipes,
			&i.LastSwipeDate,
			&i.SwipeCount,
			&i.IsPremium,
			&i.ID_2,
			&i.UserID,
			&i.TargetID,
			&i.Direction,
			&i.SwipeDate,
			&i.Unique,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
