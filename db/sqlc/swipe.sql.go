// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: swipe.sql

package db

import (
	"context"
	"database/sql"
)

const createOrUpdateSwipe = `-- name: CreateOrUpdateSwipe :one
INSERT INTO swipes (user_id, target_id, direction, swipe_date)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
ON CONFLICT (user_id, target_id) DO UPDATE
SET direction = $3, swipe_date = CURRENT_TIMESTAMP
RETURNING id, user_id, target_id, direction, swipe_date, "unique"
`

type CreateOrUpdateSwipeParams struct {
	UserID    sql.NullInt64 `json:"user_id"`
	TargetID  int64         `json:"target_id"`
	Direction interface{}   `json:"direction"`
}

func (q *Queries) CreateOrUpdateSwipe(ctx context.Context, arg CreateOrUpdateSwipeParams) (Swipe, error) {
	row := q.queryRow(ctx, q.createOrUpdateSwipeStmt, createOrUpdateSwipe, arg.UserID, arg.TargetID, arg.Direction)
	var i Swipe
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TargetID,
		&i.Direction,
		&i.SwipeDate,
		&i.Unique,
	)
	return i, err
}
